import os
import sys
import json
import subprocess
from security_scanner.utils.logger import logger
from security_scanner.utils.helpers import ensure_installed

class VulnerabilityScanner:
    def __init__(self, config):
        self.config = config
        self.tools_installed = False
        self._verify_installation()

    def scan(self, domain, report):
        """Main vulnerability scanning entry point"""
        if not self.tools_installed:
            logger.error("Required tools not installed, skipping vulnerability scan")
            return

        report["vulnerabilities"] = {}
        
        for subdomain in report.get("subdomains", []):
            try:
                subdomain_report = {}
                
                # Nikto Scan
                nikto_results = self._run_nikto(subdomain)
                if nikto_results:
                    subdomain_report["nikto"] = nikto_results
                
                # Nuclei Scan
                nuclei_results = self._run_nuclei(subdomain)
                if nuclei_results:
                    subdomain_report["nuclei"] = nuclei_results
                
                # WordPress Scan
                if self._is_wordpress_detected(subdomain, report):
                    wp_results = self._run_wpscan(subdomain)
                    if wp_results:
                        subdomain_report["wordpress"] = wp_results
                
                if subdomain_report:
                    report["vulnerabilities"][subdomain] = subdomain_report
                    
            except Exception as e:
                logger.error(f"Vulnerability scan failed for {subdomain}: {e}")

    def _verify_installation(self):
        """Verify and install required dependencies"""
        self.tools_installed = all([
            ensure_installed(
                command="nikto",
                install_cmd=self._install_nikto,
                prompt="Nikto required for vulnerability scanning. Install now?"
            ),
            ensure_installed(
                command="nuclei",
                install_cmd=self._install_nuclei,
                prompt="Nuclei required for vulnerability scanning. Install now?"
            ),
            ensure_installed(
                command="wpscan",
                install_cmd=self._install_wpscan,
                prompt="WPScan required for WordPress checks. Install now?"
            )
        ])

    def _install_nikto(self):
        """Install Nikto from GitHub"""
        try:
            logger.info("Installing Nikto...")
            nikto_dir = "nikto"
            
            if os.path.exists(nikto_dir):
                subprocess.run(["git", "-C", nikto_dir, "pull"], check=True)
            else:
                subprocess.run(["git", "clone", "https://github.com/sullo/nikto.git", nikto_dir], check=True)
            
            # Install Perl dependencies
            subprocess.run(["sudo", "cpan", "install", "JSON::XS"], check=True)
            
            # Set up executable
            nikto_script = os.path.join(nikto_dir, "program", "nikto.pl")
            subprocess.run(["chmod", "+x", nikto_script], check=True)
            subprocess.run(["sudo", "ln", "-s", os.path.abspath(nikto_script), "/usr/local/bin/nikto"], check=True)
            
            return True
        except Exception as e:
            logger.error(f"Nikto installation failed: {e}")
            return False

    def _install_nuclei(self):
        """Install Nuclei and dependencies"""
        try:
            if not ensure_installed("go", self._install_go):
                return False

            logger.info("Installing Nuclei...")
            subprocess.run(
                ["go", "install", "-v", "github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest"],
                check=True
            )
            return True
        except Exception as e:
            logger.error(f"Nuclei installation failed: {e}")
            return False

    def _install_go(self):
        """Install Go language"""
        try:
            logger.info("Installing Go...")
            if sys.platform == "linux":
                subprocess.run(["sudo", "apt-get", "update"], check=True)
                subprocess.run(["sudo", "apt-get", "install", "-y", "golang"], check=True)
            elif sys.platform == "darwin":
                subprocess.run(["brew", "install", "go"], check=True)
            else:
                logger.error("Unsupported OS for Go installation")
                return False
            return True
        except Exception as e:
            logger.error(f"Go installation failed: {e}")
            return False

    def _install_wpscan(self):
        """Install WPScan"""
        try:
            logger.info("Installing WPScan...")
            subprocess.run(["gem", "install", "wpscan"], check=True)
            return True
        except Exception as e:
            logger.error(f"WPScan installation failed: {e}")
            return False

    def _run_nikto(self, target):
        """Execute Nikto scan"""
        result_path = f"scan_results_{target}/{target}_nikto.json"
        try:
            logger.info(f"Running Nikto scan on {target}")
            result = subprocess.run(
                ["nikto", "-h", target, "-Format", "json", "-output", result_path ,"-nointeractive", "-maxtime", "10m"],
                capture_output=True,
                text=True,
            )
            if result.returncode == 0:
                with open(result_path, "r") as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"Nikto scan failed: {e}")
            try:
                with open(result_path, "r") as f:
                        return json.load(f)
            except Exception as et:
                logger.error(f"Nikto failed to parse: {et}")
            return None

    def _run_nuclei(self, target):
        """Execute Nuclei scan"""
        result_path = f"scan_results_{target}/{target}_nuclei.json"
        try:
            logger.info(f"Running Nuclei scan on {target}")
            result = subprocess.run(
                [
                    "nuclei",
                    "-u", f"{target}",
                    "-json-export", result_path,
                    "-t", "cves/",
                    "-t", "vulnerabilities/",
                    "-t", "misconfiguration/",
                    "-t", "default-logins/",
                    "-t", "exposures/",
                    "-t", "malware/",
                    "-t", "takeovers/",
                    "-severity", "critical,high,medium,low,info",
                    "-o", f"{result_path}"
                ],
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                with open(f"{result_path}", "r") as f:
                    scan_results = json.load(f)
                    return self._process_nuclei_output(scan_results)
        except Exception as e:
            logger.error(f"Nuclei scan failed: {e}")
            return None

    def _process_nuclei_output(self, output):
        """Parse and format Nuclei results"""
        try:
            return [{
                "name": item.get("info", {}).get("name"),
                "severity": item.get("info", {}).get("severity"),
                "description": item.get("info", {}).get("description"),
                "reference": item.get("info", {}).get("reference"),
                "matched": item.get("matched-at")
            } for item in output]
        except Exception as e:
            logger.error(f"Nuclei results processing failed: {e}")
            logger.error(f"Results: {output}")
            return None

    def _is_wordpress_detected(self, subdomain, report):
        """Check if WordPress is detected in technologies"""
        tech = report.get("technologies", {}).get(subdomain, {})
        return any("wordpress" in key.lower() for key in tech.get("details", {}))

    def _run_wpscan(self, target):
        """Execute WordPress scan"""
        try:
            logger.info(f"Running WPScan on {target}")
            result = subprocess.run(
                ["wpscan", "--url", target, "--format", "json", "--output", f"scan_results_{target}/{target}_wpscan.json"],
                capture_output=True,
                text=True,
                timeout=600  # 10 minute timeout
            )
            return json.loads(result.stdout) if result.returncode == 0 else None
        except Exception as e:
            logger.error(f"WPScan failed: {e}")
            return None